import telebot
from telebot import types
import os
import yt_dlp
from concurrent.futures import ThreadPoolExecutor
import json


TOKEN = '?'
GROUP_ID = -?

bot = telebot.TeleBot(TOKEN)
AWAITING_VIDEO_LINK = 2

waiting_feedback = {}
user_states = {}




BASE_PATH = '/home/amantur/bot'

executor = ThreadPoolExecutor()


STATS_FILE_PATH = '?'



def load_stats():
    try:
        with open(STATS_FILE_PATH, 'r') as stats_file:
            stats_data = json.load(stats_file)
            if 'unique_users_count' not in stats_data:
                stats_data['unique_users_count'] = 0
            stats_data['unique_users'] = set(stats_data['unique_users'])
            return stats_data
    except FileNotFoundError:
        print("Stats file not found.")
        return {'unique_users': set(), 'unique_users_count': 0, 'videos_sent': 0}
    except json.JSONDecodeError as e:
        print(f"Error loading stats: {e}")
        return {'unique_users': set(), 'unique_users_count': 0, 'videos_sent': 0}

def save_stats(stats):
    with open(STATS_FILE_PATH, 'w') as stats_file:
        json.dump(stats, stats_file, default=list)



def process_message(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ (private chat)
    if message.chat.type == 'private':
        if message.text == '/start':
            handle_start(message)
        elif message.text == '/help':
            handle_help(message)
        elif 'https' in message.text and 'youtu' in message.text:
            handle_media_link(message)
        elif message.text == '/founder':
            handle_founder(message)
        elif message.text == '/feedback':
            handle_feedback_command(message)
        elif message.text == '/stats':
            send_stats_to_group(message)
        else:
            bot.delete_message(message.chat.id, message.message_id)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if message.text.startswith('/'):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            return


def handle_start(message):
    user_name = message.from_user.first_name
    photo_file_path1 = '/home/amantur/bot/audios/gifs/–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.png'
    with open(photo_file_path1, 'rb') as photo_file:
        bot.send_photo(message.from_user.id, photo_file)
    bot.send_message(message.from_user.id, f"""Helloüëã, {user_name} ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º—É–∑—ã–∫—É üíø –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Çüìú!


<b>‚ùó‚ùóÔ∏è –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ WEBM, –∞ –Ω–µ mp3 ‚ùóÔ∏è‚ùóÔ∏è</b>
""",parse_mode="HTML",reply_markup=types.ReplyKeyboardRemove())



def handle_founder(message):
    if message.chat.type == 'private':
        #gif_file_path = '/home/amantur/bot/audios/gifs/ichigo.gif'
        bot.send_message(message.chat.id, """–í—Å–µ —Å–æ—Ü–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π‚¨õÔ∏è:
Instagram - https://www.instagram.com/emirlanchikk
Telegram - @bumizxc
Tik Tok - https://www.tiktok.com/@emirlan4ik_?_t=8jpJgkrC8qg&_r=

Instagram - https://www.instagram.com/akbarrych
Telegram - @Akbarrych
Tik Tok - https://www.tiktok.com/@kchkvkbr?_t=8jpJXhQqtmh&_r=1
–ü—Ä–æ—Å–∏–º –≤–∞—Å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à–∏  –°–æ—Ü-—Å–µ—Ç–∏ , —Ç–∞–∫ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –Ω–∞—Å —Ç–µ–º —Å–∞–º—ã–º —É–ª—É—á—à–∞—è –Ω–∞—à –ø—Ä–æ–µ–∫—Ç.‚ù§Ô∏è
        """,reply_markup=types.ReplyKeyboardRemove())


def handle_feedback_command(message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        waiting_feedback[user_id] = True
        bot.send_message(message.chat.id,
                          "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞.‚ö°\n"
                          "–ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏ —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ –∂–µ, –¥–æ–π–¥–µ—Ç –¥–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è!\n"
                          "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:",reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, handle_feedback_message)
    else:
        pass


def handle_feedback_message(message):
    user_id = message.from_user.id
    user_name = message.from_user.username
    user_feedback = message.text

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
    group_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_name} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–∂–µ–ª–∞–Ω–∏—è: {user_feedback}"
    bot.send_message(GROUP_ID, group_text)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
    waiting_feedback[user_id] = False











def handle_help(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    start_button = types.KeyboardButton("/start")
    founder_button = types.KeyboardButton("/founder")
    feedback_button = types.KeyboardButton("/feedback")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ —Ä–∞–∑–º–µ—Ç–∫–µ
    markup.add(start_button)
    markup.add(founder_button, feedback_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    bot.send_message(
        message.from_user.id,
        """–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ë–æ—Ç–∞ ü§ñ:
/help - [–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥–∞—Ö]‚úÖ
/start - [–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç, –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã]üöÄ
/feedback - [–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –Ω–∞–º–∏. –°–æ–≤–µ—Ç—ã, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –±–æ—Ç–∞ –∏ —Ç.–¥]üîõ
/founder - [–ü—Ä–æ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—è]üë®üèº‚ÄçÔøΩ
*‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á‚¨á-–ö–∞–∫ —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—É*
*–ß—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –º—É–∑—ã–∫—Éüéº*
–ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—Éüîó –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ YouTube –≤ –ª—é–±–æ–µ –º–µ—Å—Ç–æ –≤ –±–æ—Ç–µ –∏ –æ–Ω —Å–∫–∞—á–∞–µ—Ç –≤–∞–º.
–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏,üôå‚ù§""",
        reply_markup=markup
    )



#@bot.message_handler(commands=['reklama'])
#def reklama(message):
#    inline_keyboard = types.InlineKeyboardMarkup(row_width=1)
#
#    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
#    inline_button = types.InlineKeyboardButton(text='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º—É–∑—ã–∫–∞üé∂', url='t.me/muzlinkbot')
#
#    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#    inline_keyboard.add(inline_button)
#
#    bot.send_message(message.from_user.id,'–°–∫–∞—á–∞–π —Å–≤–æ—é –ª—é–±–∏–º—É—é <a href="http://t.me/muzlinkbot">–º—É–∑—ã–∫—É</a> –±–µ—Å–ø–ª–∞—Ç–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ãüòò',reply_markup=inline_keyboard,parse_mode="HTML")


#handle media link  *func*

def handle_media_link(message):
    user_id = message.from_user.id
    chat_id = message.chat.id
    user_name = message.from_user.first_name
    bot.send_message(chat_id, f"–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_name}! –ü—Ä–æ—Å–∏–º –ø–æ–¥–Ω–∞–±—Ä–∞—Ç—å—Å—è —Ç–µ—Ä–ø–µ–Ω–∏—è. –í–∞—à–µ –∞—É–¥–∏–æ —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—èüîúüéµ –° –£–≤–∞–∂–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥–∞ STEüñ§")

    try:
        media_link = message.text
        audio_paths = download_media_audio(media_link, chat_id)
        for audio_path in audio_paths:
            send_audio(chat_id, audio_path)
            stats = load_stats()

            if message.from_user.id not in stats['unique_users']:
                user_info = f"{message.from_user.id}-@{message.from_user.username}"
                stats['unique_users'].add(user_info)
                stats['unique_users_count'] = len(stats['unique_users'])



                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                save_stats(stats)

    except yt_dlp.utils.DownloadError as e:
        if 'is not a valid URL' in str(e):
            bot.send_message(chat_id, f"{user_name} –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –µ–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏.")
        elif 'entity too large' in str(e):
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
        else:
            if 'The playlist does not exist' in str(e):
                bot.send_message(chat_id, f"""–£–≤–∞–∂–∞–µ–º—ã–π(–∞—è) {user_name}, –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏.
–≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —É –≤–∞—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –ø–ª–µ–π–ª–∏—Å—Ç—É.
–ß—Ç–æ–±—ã —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–∞ –≤–∞—à–µ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞.""")
                photo_file_path1 = '/home/amantur/bot/audios/gifs/–ò–ù–°–¢ 1.jpg'
                with open(photo_file_path1, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file)
                photo_file_path2 = '/home/amantur/bot/audios/gifs/–ò–ù–°–¢ 2.jpg'
                with open(photo_file_path2, 'rb') as photo_file:
                    bot.send_photo(chat_id, photo_file)
                return []
            else:
                error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {e}"
                bot.send_message(chat_id, error_message)
                return []
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –í —ç—Ç–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤
        pass

def download_media_audio(url, chat_id):
    if "/playlist" in url:
        return download_playlist_audio(url, chat_id)
    else:
        return [download_audio(url, chat_id)]


def download_audio(url, chat_id):
    download_folder = BASE_PATH
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(download_folder, '%(title)s'),
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö)
        max_file_size_bytes = 50 * 1024 * 1024  # 50 –ú–ë

        if 'filesize' in info and info['filesize'] > max_file_size_bytes:
            error_message = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —É –∫–æ—Ç–æ—Ä–æ–≥–æ –∞—É–¥–∏–æ –º–µ–Ω—å—à–µ 50–º–±."
            bot.send_message(chat_id, error_message)
            return None

        ydl.download([url])

    return os.path.join(download_folder, ydl.prepare_filename(info))


def check_file_size(d):
    max_file_size_bytes = 50 * 1024 * 1024  # 50 –ú–ë
    if 'filesize' in d and d['filesize'] > max_file_size_bytes:
        return {'download': False,
                'message': f"–§–∞–π–ª '{d['title']}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏ –Ω–µ –±—É–¥–µ—Ç —Å–∫–∞—á–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –º–µ–Ω–µ–µ 50 –ú–ë."}
    return {'download': True}


def download_playlist_audio(url, chat_id):
    download_folder = BASE_PATH
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(download_folder, '%(title)s'),
        'progress_hooks': [check_file_size],
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(url, download=False)
        ydl.download([url])

    valid_entries = [entry for entry in info['entries'] if
                     os.path.exists(os.path.join(download_folder, ydl.prepare_filename(entry)))]

    if not valid_entries:
        error_message = "–í—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –∏ –Ω–µ –±—É–¥—É—Ç —Å–∫–∞—á–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ –º–µ–Ω–µ–µ 50 –ú–ë."
        bot.send_message(chat_id, error_message)
        return []

    return [os.path.join(download_folder, ydl.prepare_filename(entry)) for entry in valid_entries]


def send_audio(chat_id, audio_path):
    text_message = "[üîç–°–∫–∞—á–∞—Ç—å –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É‚ö°Ô∏è](t.me/muzlinkbot)"
    try:
        if audio_path is None:
            raise ValueError("–í–∞—à–µ –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–∫–∞—á–∞–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!) üôè ")

        with open(audio_path, 'rb') as audio_file:
            bot.send_audio(chat_id, audio_file, caption=text_message, parse_mode="MarkdownV2")
            stats = load_stats()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            stats['audios_sent'] += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            save_stats(stats)
        #bot.send_message(chat_id,"‚ÄºÔ∏è–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>webm</b> –∞ –Ω–µ <i>mp3</i>‚ÄºÔ∏è",parse_mode="HTML")
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}"
        if 'Entity Too Large' in error_message:
            bot.send_message(chat_id,
                             f"–§–∞–π–ª {os.path.basename(audio_path)} –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∏–∑-–∑–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–≥–æ –≤–µ—Å–∞. –ü—Ä–æ—Å–∏–º –≤–∞—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!‚ôª")
        else:
            bot.send_message(chat_id, error_message)
    finally:

            # –í–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∏–ª–∏ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
        os.remove(audio_path)


def send_stats_to_group(message):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = load_stats()

        # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"Before sending to group - Unique Users: {len(stats['unique_users'])}, Videos Sent: {stats['audios_sent']}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        save_stats(stats)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≥—Ä—É–ø–ø—É
        stats_message = f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(stats['unique_users'])}\n–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ: {stats['audios_sent']}"
        bot.send_message(GROUP_ID, stats_message)

    except Exception as e:
        print(f"Error sending stats to group: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≥—Ä—É–ø–ø—É.")




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ (private chat)
    if message.chat.type == 'private':
        if user_id not in user_states:
            user_states[user_id] = {'state': 'start'}
        executor.submit(process_message, message)
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞
        if message.text.startswith('/'):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            return
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
            executor.submit(process_message, message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
